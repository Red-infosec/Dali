#!/usr/bin/python3

from Crypto.Cipher import AES
from PIL import Image
import requests
import itertools
import argparse
import time
import base64
import sys
import os
from colorama import *

#doing argument parsing
parser = argparse.ArgumentParser()

parser.add_argument("-v", "--verbose", help="get more verbose output, run the pic-checker",
                    action="store_true")

args = parser.parse_args()

if args.verbose:
	verbose = True
else:
	verbose = False

#these are potential values our alpha-channels can have
alpha_list = [96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161]

#this is the entire base64 char set, these will be synced to an alpha-channel value from above
#for example, base64 value of '2' will be an alpha channel of 193 (both index [2])
alpha_chars = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', '+', '/', '=']

#randomized list of 500 potential alpha-channel indexes in our flat list of RGBA values
alpha_candidates_blue = [1994986, 1044674, 1117102, 518618, 1845526, 674250, 855542, 181898, 919938, 1043438, 896230, 1008530, 890506, 933094, 1375702, 1737162, 141454, 1058470, 319566, 1792718, 1072362, 2064670, 1558106, 1484618, 1810522, 628886, 189754, 1641902, 974074, 1325910, 174118, 1642458, 673742, 1338970, 45818, 1608818, 749390, 1484818, 1227502, 1982566, 1642278, 1768778, 194594, 1662738, 2021882, 575586, 828218, 1136262, 1768210, 1849442, 841222, 641974, 1241442, 572950, 620858, 378462, 116166, 276386, 343642, 1500974, 1711910, 1080294, 1764174, 983098, 1233382, 1297866, 1889926, 1483518, 994978, 938618, 898798, 1502434, 1116966, 712770, 850474, 1527642, 753454, 613014, 1194998, 666302, 1360286, 984894, 116330, 1206666, 2031846, 638174, 395986, 122842, 212450, 298486, 1976522, 215982, 1001618, 1726890, 759098, 1617602, 348638, 1348454, 1559042, 1102418, 707970, 353862, 1977066, 1988214, 1142138, 1735502, 1840922, 558174, 782986, 1141386, 1108034, 624014, 623206, 1080134, 1712482, 1230390, 1609154, 86842, 1345810, 1538390, 1962906, 1951810, 156870, 1782274, 363302, 797570, 661730, 782194, 1307662, 763702, 1389190, 721050, 1856102, 422310, 810842, 1199410, 651674, 1337434, 1867194, 845758, 1357138, 1667258, 1809546, 1731218, 939510, 959966, 2049766, 307530, 2023918, 1551478, 191650, 1635658, 415438, 1995318, 48262, 478882, 2005318, 1274438, 2011842, 829174, 586858, 559974, 1897186, 1010386, 1822182, 360250, 1320938, 1635034, 911274, 1132998, 2029394, 638646, 567498, 1908670, 122370, 788638, 198078, 1615414, 1155730, 1853350, 96766, 1755970, 1522442, 1354710, 188434, 251126, 1814106, 2039818, 1261382, 654162, 887714, 699454, 1007678, 1238998, 1039726, 1569706, 1555778, 1364162, 1710886, 574162, 694602, 909282, 683534, 175858, 974530, 1966746, 1987798, 1113678, 1218782, 1966238, 2067122, 117850, 1159826, 341250, 875954, 1527574, 413906, 958786, 944346, 2049134, 2023646, 1157950, 333850, 1366870, 1692386, 512358, 704606, 1942226, 1848434, 1906054, 1367378, 1930714, 218018, 252050, 1760214, 324882, 1685966, 1989530, 393802, 1316998, 481394, 1272566, 87818, 113090, 469098, 1939878, 1207138, 1505214, 593862, 818178, 950190, 1288718, 1215294, 294498, 366798, 1248866, 1075366, 750866, 564022, 397070, 489246, 395090, 1701182, 322142, 481666, 1907890, 410474, 1613074, 1383598, 2036878, 220042, 1096290, 421710, 1515062, 855542, 944674, 252210, 770002, 640674, 786514, 1798182, 1083746, 734318, 318714, 301710, 1626870, 754786, 99638, 791834, 87850, 941334, 260542, 283358, 1467790, 1353550, 1535906, 791674, 1211690, 1390282, 480074, 282518, 1247002, 1838314, 1874682, 1690934, 1170414, 1734826, 1619382, 433494, 1711974, 1794986, 1003982, 713182, 1475618, 2044862, 1063294, 509930, 868934, 1816314, 1015238, 1782546, 1770906, 603630, 1827430, 1528506, 148658, 1289110, 1201686, 1791078, 1088826, 468266, 607078, 1326050, 309770, 1057890, 52210, 1860106, 570398, 84782, 1689946, 310202, 646918, 1056354, 1470542, 945490, 369474, 1248318, 2066078, 1848070, 898926, 214778, 566794, 45462, 2047730, 430234, 1556710, 1602202, 1937394, 916470, 975114, 835866, 1846274, 1623838, 561518, 1434802, 584270, 1030182, 109230, 389922, 609118, 553726, 1222226, 1484074, 1305838, 1483278, 1360314, 945090, 92730, 1737306, 1727434, 1284542, 96502, 1978930, 359018, 1103082, 566674, 1663898, 266854, 1028542, 791338, 35666, 769602, 632106, 1484914, 305602, 401718, 1638846, 2031710, 282886, 791858, 62710, 362154, 218574, 465482, 1618318, 835238, 474266, 1346186, 1681002, 1708134, 1541150, 1101114, 321766, 1232902, 903942, 480670, 1979710, 56058, 1721986, 1112162, 855430, 1011186, 278718, 1374074, 1359478, 472426, 1086722, 1026854, 1710606, 1263934, 438554, 958110, 1631682, 851922, 881566, 463922, 1056210, 1515342, 634434, 277814, 1902778, 209550, 1969914, 652654, 754538, 680722, 1592278, 272342, 1904974, 553870, 1788258, 833598, 248750, 1331318, 19710, 1382562, 536082, 1878798, 87766, 725486, 1640698, 392550, 1903406, 409682, 1004998, 1201218, 635054, 832174, 1537590, 864442, 2067610, 1642574, 4130, 291398, 1900706, 1245142, 210226, 65098, 271962, 766794, 1259554, 2003202, 292486, 1263882, 1035794, 480458, 302066, 200798, 1837010, 1003114, 1518862, 1147558, 1986066, 1038706, 543134, 1104942, 1776866, 1476994, 1102934, 569198, 447126, 2037094, 390994, 156474, 305834, 1518238, 273790, 1051458, 1726802, 432442, 482290, 1400322, 1164662, 1674778, 1246686, 2045210, 13662, 509738, 566282, 394134, 145122, 1734610, 1160086, 115774, 1094830, 1038738, 1326818, 1045030, 1382854, 821034, 1864422, 1033974, 1837338, 227094, 315490, 577654, 684198, 1130238, 296634, 1643690, 1781042, 79102, 1491482, 514490, 404718, 61314, 1134130, 190622, 949402, 1654110, 248886, 1320074, 1759150, 574722, 1223010, 1020434, 80298, 423714, 95002, 1734578, 1731046, 432322, 32674, 599198, 1118374, 338534, 555906, 1905006, 1977318, 1650238, 1742850, 1249070, 1823942, 93198, 947034, 1284638, 985634, 235010, 1199766, 1089758, 1988502, 1720390, 922490, 140310, 1217162, 1669922, 326274, 1386394, 508674, 577306, 480506, 1381326, 1113054, 2048678, 340322, 1476786, 1536510, 223458, 1056422, 1647098, 66722, 149186, 1976530, 194970, 867054, 1351938, 1646206, 1750574, 1313630, 346074, 712790, 1183414, 1415906, 1448122, 1571798, 565802, 1130306, 462470, 548354, 632926, 155158, 811106, 836206, 1316146, 683850, 208154, 1979550, 1918362, 1331518, 972386, 1811342, 1300002, 833286, 891686, 450050, 29754, 1543450, 1818618, 1044898, 1858894, 512042, 212686, 1116410, 894798, 41454, 396742, 549970, 1423454, 752062, 1561778, 1627490, 365374, 265986, 272782, 504266, 789806, 179486, 1975474, 873506, 876354, 1351954, 661210, 620370, 65606, 1599190, 70450, 1095818, 1342798, 554186, 232538, 941518, 103690, 1154322, 1899186, 499646, 1262062, 1172822, 1722066, 934278, 1946366, 286954, 439062, 1859274, 1795742, 1005642, 456422, 1429554, 110530, 1690034, 2004286, 1716434, 691322, 539302, 1499034, 1752554, 357974, 796218, 1135706, 196150, 526870, 1243470, 919322, 29586, 1086094, 482878, 1693854, 198798, 379654, 689758, 174318, 1595426, 557474, 1045762, 1637262, 625166, 1889618, 494770, 416898, 1811534, 454546, 1340954, 305262, 1854638, 82918, 114350, 1534710, 94434, 941278, 1463290, 1251954, 1383522, 408622, 1253762, 98026, 856414, 205202, 2024882, 306634, 1153498, 697262, 1598438, 654454, 1074782, 1257730, 1866154, 53738, 1801018, 1540362, 752498, 1045202, 1039106, 1435590, 121830, 1000662, 809470, 15986, 468754, 462766, 1111086, 988618, 1803258, 423694, 699650, 1324662, 1541342, 2019046, 1228802, 1878658, 1273514, 747134, 1702086, 1208070, 1049342, 247474, 1927598, 2015570, 1299810, 1519454, 74590, 1793690, 836014, 107182, 858706, 1227810, 1518286, 1752038, 193282, 117202, 236870, 1534134, 1779630, 915086, 1728278, 2026082, 1430522, 997390, 1989350, 1555506, 1009566, 539994, 1395378, 1208262, 863818, 1950602, 611838, 18710, 827046, 1819230, 959130, 82830, 938918, 827382, 495434, 1584670, 538174, 912330, 2041034, 1194814, 1824226, 1845378, 1865122, 1990546, 828746, 1140042, 373682, 1648998, 804150, 738534, 364990, 537314, 54, 623178, 181882, 99242, 602062, 538026, 187234, 470802, 734790, 640726, 721950, 1127238, 146054, 1187750, 1015058, 679818, 1012402, 245602, 1070146, 32318, 763210, 1733322, 1287346, 950714, 2007582, 1572726, 384978, 368086, 1559686, 1394686, 501682, 613662, 2032154, 1917334, 841734, 1052930, 1414678, 1470898, 130806, 162162, 1872950, 767906, 1775926, 925134, 1939454, 1555426, 1269966, 1253150, 824678, 1687786, 130626, 1258554, 2062522, 1764922, 175950, 1590094, 251370, 1162422, 875970, 846950, 1985654, 1765138, 1592574, 503146, 816530, 1740462, 1551654, 489626, 1119386, 297410, 1638782, 1024098, 767250, 175186, 315658, 1353394, 1464634, 987234, 38350, 1007366, 432794, 589782, 1166014, 1231854, 65726, 2016146, 1456050, 1643438, 1849042, 1913186, 873654, 36398, 697150, 1479986, 1354114, 1862498, 189242, 770518, 1846426, 1167506, 244122, 401714, 654734, 216070, 1490162, 847442, 1580466, 684506, 663954, 1028650, 2025726, 1584722, 462338, 431610, 685198, 7618, 619806, 859690, 662294, 1184178, 235778, 437594, 1691170, 1758526, 561466, 1623498, 1951162, 1096242, 721366, 1422190, 1472682, 676766, 412210, 1611610, 1948658, 46302, 1202034, 881586, 108806, 790646, 1872382, 1368990, 2032458, 921730, 1237298, 273042, 1226742, 338674, 221762, 1906738, 1117762, 85526, 1332522, 1384470, 1428918, 554414, 335202, 1303754, 417598, 304258, 336902, 810454, 64854, 403786, 988042, 180798, 898218, 1422822, 314770, 2034326, 201790]
alpha_candidates_green = [1495785, 1465281, 47913, 1221521, 476253, 2060521, 337793, 1534593, 1260313, 33937, 1509389, 412969, 1085417, 2043145, 962973, 1457445, 1030161, 2020169, 590393, 880073, 769625, 392925, 1136449, 1476845, 1405509, 212709, 1512577, 727013, 270237, 1487021, 149913, 366625, 1943509, 122685, 1661493, 1326841, 499845, 1052969, 1868877, 1582601, 61437, 676505, 1634937, 564197, 651413, 2001813, 231121, 1635201, 799429, 869805, 1444385, 1254681, 799513, 1415221, 2035885, 938521, 1495273, 817321, 1989841, 1986397, 1246945, 1633737, 715809, 488781, 312305, 1646133, 1453037, 728689, 145913, 454085, 1707413, 43821, 487941, 857333, 1422509, 947009, 359553, 1390785, 1890777, 1429841, 1815385, 1420609, 1404501, 2002265, 634601, 1771209, 540909, 1991569, 1565533, 1189485, 1240985, 898801, 1623733, 788041, 850833, 1151993, 256597, 500029, 1350397, 1911797, 1842229, 767677, 722349, 477961, 418445, 256129, 473485, 1218913, 602773, 174937, 1256533, 59405, 1294885, 291461, 1410485, 949453, 1164501, 1711201, 1418677, 920001, 1119585, 1236973, 509685, 1838165, 1712845, 70633, 1696521, 1348053, 1559233, 787913, 834701, 394369, 1341617, 171873, 1443485, 514321, 680341, 1029181, 519221, 416293, 315689, 1176357, 604249, 1676677, 1516845, 532077, 81653, 1376173, 1789853, 1123829, 1095185, 1441741, 1515709, 184141, 1789053, 1024141, 1128945, 1088225, 792297, 1404281, 1015221, 1354301, 1464509, 1580213, 2005877, 1995993, 767949, 1337969, 454021, 869877, 1690633, 634945, 1005781, 1562233, 197973, 747153, 584157, 601065, 2069629, 744361, 1419629, 1450181, 962793, 838417, 1606505, 972305, 446389, 459853, 453393, 118717, 70305, 1949953, 1333017, 1338781, 196237, 1108957, 923509, 1152929, 2014525, 544597, 664041, 1243289, 1274869, 170509, 748177, 1819837, 1357553, 878521, 920437, 308989, 132889, 400853, 762397, 284429, 1991573, 776797, 2038769, 1471053, 799369, 383497, 202921, 436801, 154665, 1890673, 856201, 781825, 1546665, 1888033, 911497, 1347557, 425373, 1835677, 820229, 561061, 1514765, 68017, 1619357, 1540145, 870389, 1321201, 1732209, 1540013, 233697, 1372177, 1651721, 268405, 1305817, 816253, 1799625, 378409, 1547629, 472373, 983609, 1437777, 1827457, 937469, 1029933, 444525, 727897, 1178749, 1304409, 725693, 490661, 1558925, 861821, 714817, 1633185, 966689, 304745, 1776033, 1860217, 1749169, 1194513, 874781, 617237, 288013, 1309281, 1151845, 1696533, 121829, 2020873, 284645, 724065, 573953, 5997, 258077, 2801, 369685, 757733, 1230757, 1928569, 8801, 34581, 282733, 144277, 902133, 310121, 682309, 555365, 1039113, 1260001, 1494165, 1109193, 487409, 1333277, 1809153, 1862217, 734649, 795733, 892945, 1349697, 209661, 1157745, 1338621, 381177, 318213, 1590737, 1167241, 2009681, 1553557, 349925, 424193, 1378473, 1405501, 1663377, 259189, 677041, 1368833, 518069, 1224613, 1316969, 1008777, 718981, 554721, 1681633, 873573, 916009, 1872329, 985401, 677093, 1645617, 105589, 629981, 1086649, 578589, 905313, 154693, 1069833, 1726201, 148105, 138057, 1022125, 1342289, 536809, 1692113, 1461281, 36193, 1248753, 1618725, 1166301, 94357, 1178449, 1911221, 48865, 489021, 817973, 1235889, 1102801, 40741, 133817, 690133, 1692781, 1607089, 1525369, 1045949, 1669773, 127765, 1970581, 1266249, 353509, 447917, 1181733, 277537, 819325, 948837, 1382493, 980249, 919369, 1673245, 1211841, 696565, 683345, 254017, 904085, 1384885, 633929, 1066909, 1834461, 236185, 62993, 265345, 244313, 599301, 1268613, 703509, 1923413, 420249, 1583065, 72997, 1058125, 1700249, 566457, 903473, 1021677, 1352577, 1442281, 1839209, 943685, 752309, 847985, 508665, 867317, 1191789, 668149, 491989, 1965465, 759597, 542773, 27097, 507753, 1063277, 1880949, 889877, 1763833, 77313, 1685253, 687389, 1926605, 396669, 566233, 705385, 969009, 878737, 1355977, 634101, 1348313, 1136085, 14865, 1916625, 1606889, 1843501, 1354753, 1874733, 299557, 1349221, 1520097, 684057, 646697, 1629353, 480029, 978941, 1039965, 232997, 920493, 654525, 730757, 1982189, 1459405, 1715993, 1875385, 125793, 1858221, 719457, 765025, 2048089, 1764005, 2022253, 1585169, 1183145, 564081, 1401865, 949137, 1889641, 167057, 1399893, 626289, 399345, 74189, 695421, 1510325, 1105169, 989009, 271497, 32885, 691353, 169589, 1180365, 316225, 1383717, 404709, 1136841, 1073597, 118249, 993469, 251241, 1494953, 486565, 1165725, 1297397, 769397, 2070961, 161881, 694365, 1316901, 1585725, 1585365, 870289, 529197, 441541, 1719373, 1251317, 728149, 60269, 1836737, 366745, 243329, 495097, 457061, 1468629, 20861, 845621, 1951865, 1073757, 1916905, 999445, 1547277, 118125, 482597, 1602441, 804745, 1317153, 6645, 1315349, 99701, 1574093, 47109, 1641117, 301225, 1685649, 446505, 219193, 1642021, 606773, 101789, 1499845, 715253, 1092641, 925941, 720285, 1900377, 439641, 1779445, 1581701, 27405, 337033, 46633, 1300805, 233765, 311525, 488857, 722829, 966301, 1052941, 2067645, 328449, 23953, 324029, 1557005, 721729, 1100525, 1140233, 1585473, 1749917, 2065377, 1992753, 1280797, 2067413, 1369969, 150105, 26733, 1181457, 1078917, 346317, 2070821, 1799901, 1479305, 398541, 2004069, 1405877, 591577, 1692773, 1857393, 1359713, 725657, 1462981, 1680353, 1964537, 931497, 908381, 328865, 1339681, 1919177, 1186993, 1695357, 438605, 1992821, 1745037, 1960313, 262425, 1623853, 1689005, 485053, 1654629, 1158261, 1139833, 1951961, 650041, 1857621, 619337, 1955941, 1319121, 518929, 1266533, 815053, 1915445, 1983189, 1765829, 1492785, 764581, 1306569, 1169665, 571853, 1584145, 754741, 1407393, 1387521, 1414733, 591881, 148077, 1007569, 105505, 23229, 1349549, 830893, 442337, 81677, 1324301, 1042937, 1698973, 1923189, 431885, 490857, 416253, 821981, 1570597, 1100553, 1517313, 918321, 1296609, 1837945, 1485777, 1335953, 1803217, 1206981, 86261, 662737, 1787525, 354065, 1701665, 148329, 33913, 455497, 458613, 1067893, 272789, 1265073, 1451993, 1514189, 914749, 754961, 462521, 1056413, 1606393, 1384549, 998297, 2053881, 1908013, 1626001, 1429617, 58721, 1422801, 857737, 1433817, 703933, 1445177, 1433077, 1996481, 2025577, 495765, 212941, 1854149, 1457145, 1796937, 1756365, 1446265, 1350629, 451161, 1773, 429373, 1144833, 1834361, 1330577, 1650429, 1666129, 1917173, 390945, 267557, 694477, 1452073, 2028061, 1404821, 1384545, 1540017, 1523805, 928349, 1085853, 518969, 1819481, 1100685, 1787409, 345557, 1318797, 1692305, 1217129, 792573, 431161, 1912657, 1285693, 924265, 1729917, 761565, 1493677, 1329829, 1334029, 642645, 1101341, 585229, 529701, 694865, 808349, 98137, 1568233, 1038241, 93237, 1669245, 643245, 1311797, 1184821, 818917, 1021145, 673801, 1753945, 729249, 1233997, 104825, 1663433, 1326353, 1323905, 2021025, 800545, 629381, 939621, 1545645, 1818413, 633493, 824617, 522697, 76249, 371337, 473537, 640917, 187309, 103681, 1101109, 664253, 801313, 1470573, 1263469, 1837937, 1680145, 135257, 1154893, 1724117, 1382917, 2005041, 350789, 1702013, 1613601, 437781, 830341, 1686469, 1018877, 1934817, 206201, 1806893, 1464669, 345665, 1030117, 111757, 1006237, 1087053, 266969, 494077, 1169073, 1910557, 694929, 1975017, 868977, 449145, 749965, 1470733, 1280445, 293305, 1592025, 1297409, 409233, 605493, 1253921, 1157389, 1336353, 1733385, 842085, 1947885, 581669, 1150497, 620233, 1242777, 531249, 1074465, 461197, 1512833, 331105, 1325745, 169941, 636693, 529337, 1948881, 63273, 1560909, 538789, 703037, 1158465, 1214445, 1865977, 1169909, 186293, 1987489, 1016141, 2039845, 2023909, 1302457, 744277, 1163345, 539949, 1291349, 537397, 2057397, 1587013, 501117, 1803085, 2016881, 198869, 1224573, 813201, 2029597, 1672449, 2030501, 1651029, 1928473, 846321, 1102425, 667049, 1033033, 2068985, 1375313, 168021, 449281, 809429, 1479909, 69341, 1716301, 862013, 81501, 1529681, 467145, 1150369, 257169, 1919665, 814393, 1962697, 1385829, 718469, 1571093, 1542105, 623005, 1590945, 1061861, 1665377, 802625, 1803149, 586517, 1090825, 1653933, 214669, 2063533, 511737, 1301149, 439509, 2021129, 1317097, 1488557, 251153, 1387505, 1699449, 1132889, 547881, 1478613, 1959093, 1631513, 1697353, 402465, 1464905, 1644961, 2009461, 234873, 1729065, 1798525, 540253, 687897, 1426377, 112677, 2003437, 1489889, 592781, 891821, 291989, 1211745, 1979277, 1881133, 1079465, 64777, 2060213, 687689, 1600633, 1015445, 733641, 1849645, 11989, 1557297, 1296373, 522605, 926173, 915865, 466849, 1437349, 1058393, 873841, 687457, 1950325, 1011237, 688237, 2023957, 878085, 44177, 858449, 380013, 725925, 1348485, 295005, 1593929, 1545569, 443921, 658637, 246053, 1311445, 907733, 894465, 633625, 551673, 1742029]
alpha_candidates_red = [1360748, 561472, 1828404, 519928, 151064, 2071212, 346696, 1935744, 1043228, 1579872, 332892, 142340, 288692, 1608164, 372800, 945852, 1931320, 1523608, 296200, 1019928, 1351192, 462980, 1534068, 919728, 1516596, 1711888, 352664, 1562528, 1439824, 906672, 991340, 898684, 175912, 2022060, 1046504, 1219676, 625724, 1640116, 1483124, 1645956, 1088480, 1229992, 1114244, 2060260, 856168, 1199896, 845512, 1045504, 226544, 351756, 619772, 1405248, 1571492, 1278712, 474452, 1172944, 1811664, 385280, 588928, 974484, 1874884, 1252556, 772076, 605016, 278712, 1112924, 80176, 1681808, 1507404, 444544, 1054100, 686092, 1926104, 1319952, 1139052, 1502708, 1502308, 1602248, 663692, 891508, 18348, 44444, 319400, 765360, 1744792, 879008, 1813600, 199572, 794504, 4448, 1183212, 461344, 619072, 1337732, 1857004, 1116552, 1587944, 1615544, 1604320, 1264268, 1817380, 173700, 1747496, 1897872, 702200, 1898096, 97280, 532168, 1146292, 1817940, 1086564, 926984, 687572, 473836, 185764, 1843860, 2050936, 1237084, 1295460, 941016, 2052492, 223684, 2044824, 833620, 89480, 1880228, 763808, 893928, 1336192, 56472, 743064, 1689072, 194424, 1477092, 1717876, 873896, 1386236, 212520, 1803252, 294528, 711388, 1863452, 1341084, 1187512, 26812, 1192136, 279508, 1554524, 1134416, 1645824, 1632952, 1754380, 123764, 71072, 1687184, 985800, 1785096, 271676, 212136, 823856, 271724, 827740, 1813512, 745136, 1124240, 734896, 210792, 1988144, 699352, 1882304, 144156, 345520, 1536016, 1191680, 1603596, 1907444, 1654252, 963992, 306076, 1725032, 786496, 440944, 15568, 1386832, 1092808, 164084, 1561524, 1880552, 165672, 315824, 1760408, 363204, 314756, 655624, 280460, 745300, 1625072, 318732, 264548, 1609640, 121936, 304936, 270312, 1926512, 1949156, 185408, 2005488, 1779496, 815100, 266224, 1096560, 823604, 338372, 55756, 1054636, 1212768, 362820, 766232, 949284, 187244, 952100, 885388, 486124, 170324, 619908, 30144, 109724, 111472, 498664, 1211688, 191412, 1322916, 471992, 743912, 240428, 1577148, 1233656, 890068, 572444, 513228, 43468, 1841184, 1049868, 1330108, 1790448, 1204660, 232772, 502884, 1121952, 685640, 1298464, 1528588, 1584932, 1199252, 723344, 870100, 76000, 184272, 1004788, 663852, 1115888, 1111572, 1447372, 1906428, 27120, 978188, 1900368, 755720, 1723016, 1477496, 1744844, 804224, 1006364, 1907628, 1064612, 449860, 791244, 502540, 958880, 1130216, 1852740, 751124, 1095468, 1255260, 1561992, 685668, 299656, 635280, 49836, 2058140, 939836, 1510800, 85824, 987236, 1694512, 981840, 196800, 1388432, 343696, 1200244, 1576176, 21508, 149916, 2022544, 780724, 288812, 1232232, 799896, 1611356, 1769552, 1560960, 615492, 1522032, 2027068, 1620304, 1488220, 1094068, 351432, 811544, 392064, 930264, 752800, 1564144, 1043008, 267100, 547968, 2018384, 1476648, 598776, 333148, 1906192, 1666016, 862220, 520152, 699372, 1829768, 1086752, 1703396, 862960, 599392, 633248, 796272, 1664896, 1073576, 953756, 728764, 1584952, 292252, 219856, 49268, 981388, 502972, 60548, 1468116, 1408560, 1899956, 1630720, 1338812, 1533852, 818000, 1927456, 559504, 396140, 454692, 999108, 1899016, 2072656, 469768, 1395312, 365192, 463824, 1698824, 860384, 1574504, 1689632, 1581584, 364292, 1728872, 1061600, 439764, 1298304, 1106248, 208912, 27376, 1731644, 1037696, 486888, 235596, 177928, 211952, 1904072, 737272, 1499904, 1359824, 1630680, 221396, 1631808, 338956, 2037124, 1599856, 1482668, 1774180, 2030028, 481884, 1452280, 1399196, 805528, 865084, 1393820, 1459780, 795376, 1652376, 1078232, 774216, 1451632, 484952, 100452, 1550848, 1392488, 405820, 1543148, 618932, 1242188, 1931892, 29932, 881376, 117420, 573540, 1946852, 1899060, 548228, 1744636, 2006444, 1600980, 1190540, 1426392, 786960, 1103612, 625880, 146608, 875780, 1753752, 841304, 696016, 984992, 2012612, 944332, 1223780, 838572, 1833664, 1088844, 1685608, 1239604, 1239104, 447916, 1591424, 1802968, 413716, 904728, 981572, 1487700, 1693052, 1009352, 1388512, 1796780, 1607380, 1526560, 403232, 1590864, 999232, 1400792, 1749876, 1022856, 1149532, 666136, 282252, 253188, 159452, 868116, 231632, 261584, 1271116, 2016852, 1489776, 1199756, 996752, 567524, 1041536, 894824, 504832, 1583804, 235224, 1781792, 621984, 1214328, 1991264, 1899420, 53716, 982392, 197816, 897484, 1668280, 1719928, 329708, 1124388, 558156, 628096, 915584, 925452, 1524420, 837624, 1097924, 1970016, 188076, 1304948, 1304136, 588996, 616716, 605608, 1364116, 762832, 1615208, 1741356, 1900876, 1749976, 1959900, 937272, 855436, 782900, 1218492, 940592, 72560, 621056, 42812, 178156, 782092, 590572, 1005404, 2031028, 1694268, 1834076, 1135584, 1029252, 1034904, 1649596, 1461448, 1771416, 769636, 556472, 1408764, 241620, 1268896, 1716224, 413328, 963548, 1406172, 420572, 976008, 104532, 1358264, 361452, 1176228, 653888, 549908, 1035852, 1974980, 162060, 826840, 1740320, 1640108, 1497284, 26788, 1853512, 573196, 2062316, 545260, 776376, 230668, 50508, 571368, 877500, 19164, 247976, 2016744, 2050020, 195952, 1600404, 667236, 1617776, 1692652, 1470236, 1995968, 2056760, 1816748, 250604, 1200104, 1021496, 440844, 1785100, 1388316, 528908, 1459680, 1078784, 1579288, 1010260, 1790488, 1476992, 1616512, 303440, 2037056, 745360, 1335328, 1077292, 589712, 1902868, 210472, 2017696, 1823000, 390512, 210460, 379444, 965976, 1353540, 1756028, 1343888, 1868884, 1111680, 584732, 395044, 2068976, 708580, 510992, 1658472, 1293836, 1677880, 1633520, 2040200, 1786004, 933048, 211112, 1854496, 1193884, 1637448, 1090844, 651004, 253012, 642520, 2048124, 774888, 510620, 270940, 1255224, 1166000, 1223808, 660832, 69972, 1788248, 1495060, 1718592, 629264, 1981812, 540852, 90352, 1246304, 894792, 689292, 733572, 397444, 339692, 1223576, 235660, 199000, 1503812, 1951640, 746852, 340964, 712084, 516780, 1327896, 535176, 146472, 307256, 52972, 1514756, 287520, 1900276, 1922080, 1254940, 1799892, 1226448, 124716, 1950688, 1899264, 1784584, 958108, 1520248, 960572, 509420, 1086740, 1504536, 1825520, 654928, 1991984, 317852, 1275296, 725520, 190636, 1572504, 1465224, 530852, 1132944, 751036, 847712, 617976, 31664, 712076, 1322888, 982388, 140708, 1525804, 458668, 1548824, 1082936, 661744, 392308, 712792, 1148052, 454628, 718244, 1805460, 749024, 418600, 1629556, 623068, 457820, 975744, 1570256, 639392, 114764, 959160, 229836, 277268, 573804, 1718028, 1236344, 605120, 522524, 473204, 1223936, 4952, 8380, 1079628, 728040, 764916, 1422564, 383304, 453124, 2002520, 434068, 157288, 444820, 644124, 1617848, 984256, 1365100, 2052656, 1894140, 1860032, 1222176, 135192, 674652, 1780168, 630280, 1367504, 84184, 1734240, 17952, 1716364, 1446336, 532896, 1087296, 1260924, 985668, 1749908, 1840480, 934452, 381528, 128280, 1770172, 1933904, 1913760, 356652, 1887984, 526504, 1345948, 2030964, 1185696, 1874192, 1091032, 774892, 1119868, 1628488, 505588, 411740, 286260, 1975148, 28328, 2048112, 61420, 1898300, 922300, 1350968, 728188, 782644, 671632, 1164124, 593600, 1669104, 1835128, 1136028, 1047472, 1326052, 706836, 481756, 992656, 1758688, 1695228, 1354512, 1920760, 1550604, 824808, 992720, 1411092, 251324, 1443264, 1438096, 1757460, 1022092, 1881692, 589016, 189216, 1778912, 1215412, 828848, 604664, 310160, 1907160, 364288, 860220, 549536, 1960972, 1045904, 484396, 1322688, 2016204, 1791368, 1069140, 1160604, 1828872, 1498208, 1842472, 619676, 1032300, 1497516, 1257748, 294440, 194160, 973328, 254652, 1075948, 73936, 379896, 1049380, 431940, 1521948, 1429296, 760428, 1700976, 595364, 173376, 1410528, 272392, 450284, 357624, 116992, 1618744, 1879848, 2059116, 1968868, 815076, 1146124, 1571712, 702840, 1857116, 1029504, 1955568, 1060840, 107968, 1960968, 511176, 1229556, 1236488, 141164, 603464, 1743192, 1845348, 190188, 1751004, 611168, 1092144, 322852, 1821076, 607760, 1445120, 975608, 441896, 1424652, 168748, 1481484, 743020, 1737056, 1494480, 1683844, 1897444, 131532, 34684, 1030864, 1929520, 38672, 1452376, 1630876, 1056204, 734704, 1319428, 986048, 397464, 725120, 1290652, 973228, 1289144, 204196, 618068, 2043724, 1897420, 586312, 1996620, 1673184, 853236, 1745824, 168192, 1719540, 774368, 749072, 1355280, 865692, 869392, 1856540, 2062984, 1651792, 1914924, 424908, 1127424, 1063356, 1889808, 2067016, 1382448, 141892, 400972, 1586472, 1504616, 671316, 371588, 471452, 2012016, 718416, 751628, 879640, 528292, 1164868, 1720096, 993140, 945416, 781216, 961040, 1604724, 1972616, 131432, 79288, 409076, 213164, 79488, 1921360, 1254212, 182108, 200132, 1473704, 1417704, 1610000, 1752876, 2048700]

def ascii():
	print("\n")
	print(Style.BRIGHT + Fore.YELLOW + "	~64 61 6C 69~" + Style.RESET_ALL)
	print("\n")

def start_dali():
	#get input as a string, base64 encode the command
	global command_ascii
	command_ascii = input(Style.BRIGHT + Fore.MAGENTA + "Enter command: " + Style.RESET_ALL)

	#get color
	global color
	color = input(Style.BRIGHT + Fore.MAGENTA + "Enter color to inject (RGB): " + Style.RESET_ALL)
	if (color[0] == "R") or (color[0] == "r"):
		color = "red"
	elif (color[0] == "G") or (color[0] == "g"):
		color = "green"
	elif (color[0] == "B") or (color[0] == "b"):
		color = "blue"
	else:
		print("Invalid color detected.")
		exit(1)

def create_command(command):
	#prepend command with egg and add 'x' padding for AES encryption (needs to be divisible by 16)
	command = "egg" + command
	while (len(command) % 16) != 0:
		command = command + "x"
	key = 'dali melts clock'
	iv = 'this is an iv456'
	encryption_scheme = AES.new(key, AES.MODE_CBC, iv)
	command = encryption_scheme.encrypt(command)
	command_encoded = base64.b64encode(command)
	command_encoded = command_encoded.decode("utf-8")
	if verbose:
		print("\nBase64 encoded command: %s" % (command_encoded))
	
	#get length of the command
	global length_of_command
	length_of_command = len(command_encoded)
	if verbose:
		print("Length of encoded command: %s" % str(len(command_encoded)))

	if length_of_command > 1000:
		print("Command length too long.")
		exit(1)
	
	elif (length_of_command == (250) or length_of_command == (500) or length_of_command == (1000)):
		print("Command is 250, 500, 750, or 1000 chars long, this is very bad!")
		exit(1)
	
	#get length of the command so we can translate that into an index number
	last_index = (len(command_encoded) - 1)
	
	#create a list of alpha channel values that translate to our base64 encoded command
	current = 0
	global alpha_command
	alpha_command = []
	while current <= last_index:
		index_value = alpha_chars.index(command_encoded[current])
		alpha_command.append(alpha_list[index_value])
		current += 1
	if verbose:
		print("Alpha list values for command: %s\n" % (alpha_command))
	
def craft_pic(command, color):
	# get image and get RGBA values in list
	global path
	path = input(Style.BRIGHT + Fore.MAGENTA + "Enter filename of .png to edit: " + Style.RESET_ALL)
	img = Image.open(path)
	rgb_img = img.convert('RGBA')
	rgb_vals = list(rgb_img.getdata())

	#flatten tuple list into standard list
	global rgb_flat
	rgb_flat = list(itertools.chain(*rgb_vals))

	#edit the first 1-4 blue values to the length of our encoded arg so the client knows how long to capture for
	if length_of_command <= 250:
		rgb_flat[2] = 255 - length_of_command
	elif 251 <= length_of_command <= 500:
		rgb_flat[6] = 255 - (length_of_command - 250)
		rgb_flat[2] = 5
	elif 501 <= length_of_command <= 750:
		rgb_flat[10] = 255 - (length_of_command - 500)
		rgb_flat[6] = 5
		rgb_flat[2] = 5
	elif 751 <= length_of_command <= 1000:
		rgb_flat[14] = 255 - (length_of_command - 750)
		rgb_flat[10] = 5
		rgb_flat[6] = 5
		rgb_flat[2] = 5

	if color == "blue":
		#edit pixel values for blue
		rgb_flat[1000000] = 255
		length = len(command) - 1
		current = 0
		while current <= length:
			rgb_flat[alpha_candidates_blue[current]] = command[current]
			current += 1

	elif color == "green":
		#edit pixel values for green
		rgb_flat[1000000] = 254
		length = len(command) - 1
		current = 0
		while current <= length:
			rgb_flat[alpha_candidates_green[current]] = command[current]
			current += 1

	elif color == "red":
		#edit pixel values for red
		rgb_flat[1000000] = 253
		length = len(command) - 1
		current = 0
		while current <= length:
			rgb_flat[alpha_candidates_red[current]] = command[current]
			current += 1

	#unflatten standard list back into tuple list
	iterator = iter(rgb_flat)
	unflattened = zip(iterator, iterator, iterator, iterator)
	
	#create new image from altered pixel set
	im2 = Image.new(img.mode, img.size)
	im2.putdata(list(unflattened))
	global pic_name
	pic_name = input(Style.BRIGHT + Fore.MAGENTA + "Enter filename of new .png: " + Style.RESET_ALL)
	try:
		im2.save(pic_name)
		print("\n" + pic_name + " saved to working directory.")
	except:
		print("\n Unable to save .png.")


def pic_check(pic_name):
	img = Image.open(pic_name)

	#convert bytes to RGBA data we can deal with
	rgb_img = img.convert('RGBA')
	rgb_vals = list(rgb_img.getdata())

	#flatten tuple list into standard list
	global rgb_flat
	rgb_flat = list(itertools.chain(*rgb_vals))

	print("\n" + Style.BRIGHT + Fore.MAGENTA + "Checking created image for accuracy..." + Style.RESET_ALL)

	length = len(alpha_command) - 1
	current = 0

	print("Length byte values are: " + str(rgb_flat[2]) + " " + str(rgb_flat[6]) + " " + str(rgb_flat[10]) + " " + str(rgb_flat[14]))
	
	if rgb_flat[1000000] == 255:
		print("Encoded for " + Style.BRIGHT + Fore.BLUE + "Blue" + Style.RESET_ALL)
	elif rgb_flat[1000000] == 254:
		print("Encoded for " + Style.BRIGHT + Fore.GREEN + "Green" + Style.RESET_ALL)
	elif rgb_flat[1000000] == 253:
		print("Encoded for " + Style.BRIGHT + Fore.RED + "Red" + Style.RESET_ALL)

	#check blue values
	if color == "blue":	
		while current <= length:
			if str(rgb_flat[alpha_candidates_blue[current]]) == str(alpha_command[current]):
				print("Success! Value at index " + str([alpha_candidates_blue[current]]) + " is correct.", end='\r')
				sys.stdout.flush()
			else:
				print("Failure! Value at index " + str([alpha_candidates_blue[current]]) + " is " + str(rgb_flat[alpha_candidates_blue[current]]))
				exit(1)
			time.sleep(.02)
			current += 1
		sys.stdout.write("Created .png looks fine, exiting...\n\n")

	elif color == "green":	
		while current <= length:
			if str(rgb_flat[alpha_candidates_green[current]]) == str(alpha_command[current]):
				print("Value at index " + str([alpha_candidates_green[current]]) + " is correct.", end='\r')
				sys.stdout.flush()
			else:
				print("Failure! Value at index " + str([alpha_candidates_green[current]]) + " is " + str(rgb_flat[alpha_candidates_green[current]]))
				exit(1)
			time.sleep(.02)
			current += 1
		sys.stdout.write("Created .png looks fine, exiting...\n\n")

	elif color == "red":	
		while current <= length:
			if str(rgb_flat[alpha_candidates_red[current]]) == str(alpha_command[current]):
				print("Value at index " + str([alpha_candidates_red[current]]) + " is correct.", end='\r')
				sys.stdout.flush()
			else:
				print("Failure! Value at index " + str([alpha_candidates_red[current]]) + " is " + str(rgb_flat[alpha_candidates_red[current]]))
				exit(1)
			time.sleep(.02)
			current += 1
		sys.stdout.write("Created .png looks fine, exiting...\n\n")

ascii()
start_dali()
create_command(command_ascii)
craft_pic(alpha_command, color)
if verbose:
	pic_check(pic_name)
